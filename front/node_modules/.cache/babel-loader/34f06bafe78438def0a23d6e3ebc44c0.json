{"ast":null,"code":"import { getAxios } from '../api';\nimport { all, fork, takeLatest, call, put } from 'redux-saga/effects';\nimport { ARTICLE_ADD_FAILURE, ARTICLE_ADD_REQUEST, ARTICLE_ADD_SUCCESS, ARTICLE_LIST_REQUEST, ARTICLE_LIST_SUCCESS, ARTICLE_LIST_FAILURE, DIARY_SEARCH_WORD_REQUEST, DIARY_SEARCH_WORD_SUCCESS, DIARY_SEARCH_WORD_FAILURE, DIARY_SEARCH_CONTENT_REQUEST, DIARY_SEARCH_CONTENT_SUCCESS, DIARY_SEARCH_CONTENT_FAILURE, MY_SEARCH_WORD_REQUEST } from '../reducers/article';\nconst axios = getAxios();\n\nfunction articleAddAPI(data) {\n  return axios.post('diary', data.data, {\n    params: {\n      userId: data.userId\n    }\n  });\n}\n\nfunction* articleAdd(action) {\n  const navigate = action.data.navigate;\n\n  try {\n    const res = yield call(articleAddAPI, action.data);\n    yield put({\n      type: ARTICLE_ADD_SUCCESS,\n      data: action.data\n    });\n    action.data.Modal.success({\n      content: '글 등록 완료',\n      okText: '확인',\n\n      onOk() {\n        navigate(`/diary/read/${res.data.diary.dno}`);\n      }\n\n    });\n  } catch (err) {\n    yield put({\n      type: ARTICLE_ADD_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction articleListAPI(data) {\n  return axios.get('/user/read/', {\n    params: {\n      userId: data\n    }\n  });\n}\n\nfunction* articleList(action) {\n  try {\n    const result = yield call(articleListAPI, action.data.userId);\n    const dairies = result.data.user.dairies;\n    yield action.data.setData(dairies);\n    yield put({\n      type: ARTICLE_LIST_SUCCESS,\n      data: dairies\n    });\n  } catch (err) {\n    yield put({\n      type: ARTICLE_LIST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction diarySearchWordAPI(data) {\n  const searchKind = data.searchKind;\n  return axios.get(`diary/${searchKind}`, {\n    params: {\n      userId: data.userId,\n      word: data.word\n    }\n  });\n}\n\nfunction* diarySearchWord(action) {\n  try {\n    const result = yield call(diarySearchWordAPI, action.data);\n    yield put({\n      type: DIARY_SEARCH_WORD_SUCCESS,\n      data: result.data\n    }); // yield result.data.length !== 0\n    //   ? action.data.setData([result.data[0].word])\n    //   : action.data.setData(result.data)\n\n    yield action.data.setData(result.data);\n  } catch (err) {\n    yield put({\n      type: DIARY_SEARCH_WORD_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction mySearchWordAPI(data) {\n  const searchKind = data.searchKind;\n  return axios.get(`diary/${searchKind}`, {\n    params: {\n      userId: data.userId,\n      word: data.word\n    }\n  });\n}\n\nfunction* mySearchWord(action) {\n  try {\n    const result = yield call(mySearchWordAPI, action.data);\n    yield put({\n      type: DIARY_SEARCH_WORD_SUCCESS,\n      data: result.data\n    });\n    yield result.data.length !== 0 ? action.data.setData([result.data[0].word]) : action.data.setData(result.data);\n  } catch (err) {\n    yield put({\n      type: DIARY_SEARCH_WORD_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction diarySearchContentAPI(data) {\n  const searchKind = data.searchKind;\n  return axios.get(`diary/${searchKind}`, {\n    params: {\n      keyword: data.keyword,\n      userId: data.userId\n    }\n  });\n}\n\nfunction* diarySearchContent(action) {\n  try {\n    const result = yield call(diarySearchContentAPI, action.data);\n    yield put({\n      type: DIARY_SEARCH_CONTENT_SUCCESS,\n      data: result.data\n    });\n    yield action.data.setData(result.data);\n  } catch (err) {\n    yield put({\n      type: DIARY_SEARCH_CONTENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchArticleAdd() {\n  yield takeLatest(ARTICLE_ADD_REQUEST, articleAdd);\n}\n\nfunction* watchArticleList() {\n  yield takeLatest(ARTICLE_LIST_REQUEST, articleList);\n}\n\nfunction* watchDiarySearchWord() {\n  yield takeLatest(DIARY_SEARCH_WORD_REQUEST, diarySearchWord);\n}\n\nfunction* watchMySearchWord() {\n  yield takeLatest(MY_SEARCH_WORD_REQUEST, mySearchWord);\n}\n\nfunction* watchDiarySearchContent() {\n  yield takeLatest(DIARY_SEARCH_CONTENT_REQUEST, diarySearchContent);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchArticleAdd), fork(watchArticleList), fork(watchDiarySearchWord), fork(watchDiarySearchContent), fork(watchMySearchWord)]);\n}","map":{"version":3,"sources":["C:/Users/SSAFY/Desktop/새 폴더/S06P31C205/front/src/sagas/article.js"],"names":["getAxios","all","fork","takeLatest","call","put","ARTICLE_ADD_FAILURE","ARTICLE_ADD_REQUEST","ARTICLE_ADD_SUCCESS","ARTICLE_LIST_REQUEST","ARTICLE_LIST_SUCCESS","ARTICLE_LIST_FAILURE","DIARY_SEARCH_WORD_REQUEST","DIARY_SEARCH_WORD_SUCCESS","DIARY_SEARCH_WORD_FAILURE","DIARY_SEARCH_CONTENT_REQUEST","DIARY_SEARCH_CONTENT_SUCCESS","DIARY_SEARCH_CONTENT_FAILURE","MY_SEARCH_WORD_REQUEST","axios","articleAddAPI","data","post","params","userId","articleAdd","action","navigate","res","type","Modal","success","content","okText","onOk","diary","dno","err","error","response","articleListAPI","get","articleList","result","dairies","user","setData","diarySearchWordAPI","searchKind","word","diarySearchWord","mySearchWordAPI","mySearchWord","length","diarySearchContentAPI","keyword","diarySearchContent","watchArticleAdd","watchArticleList","watchDiarySearchWord","watchMySearchWord","watchDiarySearchContent","userSaga"],"mappings":"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","sourcesContent":["import { getAxios } from '../api'\r\nimport { all, fork, takeLatest, call, put } from 'redux-saga/effects'\r\nimport {\r\n  ARTICLE_ADD_FAILURE,\r\n  ARTICLE_ADD_REQUEST,\r\n  ARTICLE_ADD_SUCCESS,\r\n  ARTICLE_LIST_REQUEST,\r\n  ARTICLE_LIST_SUCCESS,\r\n  ARTICLE_LIST_FAILURE,\r\n  DIARY_SEARCH_WORD_REQUEST,\r\n  DIARY_SEARCH_WORD_SUCCESS,\r\n  DIARY_SEARCH_WORD_FAILURE,\r\n  DIARY_SEARCH_CONTENT_REQUEST,\r\n  DIARY_SEARCH_CONTENT_SUCCESS,\r\n  DIARY_SEARCH_CONTENT_FAILURE,\r\n  MY_SEARCH_WORD_REQUEST,\r\n} from '../reducers/article'\r\n\r\nconst axios = getAxios()\r\n\r\nfunction articleAddAPI(data) {\r\n  return axios.post('diary', data.data, { params: { userId: data.userId } })\r\n}\r\n\r\nfunction* articleAdd(action) {\r\n  const navigate = action.data.navigate\r\n  try {\r\n    const res = yield call(articleAddAPI, action.data)\r\n    yield put({\r\n      type: ARTICLE_ADD_SUCCESS,\r\n      data: action.data,\r\n    })\r\n    action.data.Modal.success({\r\n      content: '글 등록 완료',\r\n      okText: '확인',\r\n      onOk() {\r\n        navigate(`/diary/read/${res.data.diary.dno}`)\r\n      },\r\n    })\r\n  } catch (err) {\r\n    yield put({\r\n      type: ARTICLE_ADD_FAILURE,\r\n      error: err.response.data,\r\n    })\r\n  }\r\n}\r\n\r\nfunction articleListAPI(data) {\r\n  return axios.get('/user/read/', { params: { userId: data } })\r\n}\r\n\r\nfunction* articleList(action) {\r\n  try {\r\n    const result = yield call(articleListAPI, action.data.userId)\r\n    const dairies = result.data.user.dairies\r\n    yield action.data.setData(dairies)\r\n    yield put({\r\n      type: ARTICLE_LIST_SUCCESS,\r\n      data: dairies,\r\n    })\r\n  } catch (err) {\r\n    yield put({\r\n      type: ARTICLE_LIST_FAILURE,\r\n      error: err.response.data,\r\n    })\r\n  }\r\n}\r\n\r\nfunction diarySearchWordAPI(data) {\r\n  const searchKind = data.searchKind\r\n  return axios.get(`diary/${searchKind}`, { params: { userId: data.userId, word: data.word } })\r\n}\r\n\r\nfunction* diarySearchWord(action) {\r\n  try {\r\n    const result = yield call(diarySearchWordAPI, action.data)\r\n    yield put({\r\n      type: DIARY_SEARCH_WORD_SUCCESS,\r\n      data: result.data,\r\n    })\r\n    // yield result.data.length !== 0\r\n    //   ? action.data.setData([result.data[0].word])\r\n    //   : action.data.setData(result.data)\r\n    yield action.data.setData(result.data)\r\n  } catch (err) {\r\n    yield put({\r\n      type: DIARY_SEARCH_WORD_FAILURE,\r\n      error: err.response.data,\r\n    })\r\n  }\r\n}\r\n\r\nfunction mySearchWordAPI(data) {\r\n  const searchKind = data.searchKind\r\n  return axios.get(`diary/${searchKind}`, { params: { userId: data.userId, word: data.word } })\r\n}\r\n\r\nfunction* mySearchWord(action) {\r\n  try {\r\n    const result = yield call(mySearchWordAPI, action.data)\r\n    yield put({\r\n      type: DIARY_SEARCH_WORD_SUCCESS,\r\n      data: result.data,\r\n    })\r\n    yield result.data.length !== 0\r\n      ? action.data.setData([result.data[0].word])\r\n      : action.data.setData(result.data)\r\n  } catch (err) {\r\n    yield put({\r\n      type: DIARY_SEARCH_WORD_FAILURE,\r\n      error: err.response.data,\r\n    })\r\n  }\r\n}\r\n\r\nfunction diarySearchContentAPI(data) {\r\n  const searchKind = data.searchKind\r\n  return axios.get(`diary/${searchKind}`, {\r\n    params: { keyword: data.keyword, userId: data.userId },\r\n  })\r\n}\r\n\r\nfunction* diarySearchContent(action) {\r\n  try {\r\n    const result = yield call(diarySearchContentAPI, action.data)\r\n    yield put({\r\n      type: DIARY_SEARCH_CONTENT_SUCCESS,\r\n      data: result.data,\r\n    })\r\n    yield action.data.setData(result.data)\r\n  } catch (err) {\r\n    yield put({\r\n      type: DIARY_SEARCH_CONTENT_FAILURE,\r\n      error: err.response.data,\r\n    })\r\n  }\r\n}\r\n\r\nfunction* watchArticleAdd() {\r\n  yield takeLatest(ARTICLE_ADD_REQUEST, articleAdd)\r\n}\r\n\r\nfunction* watchArticleList() {\r\n  yield takeLatest(ARTICLE_LIST_REQUEST, articleList)\r\n}\r\n\r\nfunction* watchDiarySearchWord() {\r\n  yield takeLatest(DIARY_SEARCH_WORD_REQUEST, diarySearchWord)\r\n}\r\n\r\nfunction* watchMySearchWord() {\r\n  yield takeLatest(MY_SEARCH_WORD_REQUEST, mySearchWord)\r\n}\r\n\r\nfunction* watchDiarySearchContent() {\r\n  yield takeLatest(DIARY_SEARCH_CONTENT_REQUEST, diarySearchContent)\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchArticleAdd),\r\n    fork(watchArticleList),\r\n    fork(watchDiarySearchWord),\r\n    fork(watchDiarySearchContent),\r\n    fork(watchMySearchWord),\r\n  ])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}