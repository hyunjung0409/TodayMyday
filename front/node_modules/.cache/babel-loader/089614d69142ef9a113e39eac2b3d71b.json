{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SSAFY\\\\Desktop\\\\\\uC0C8 \\uD3F4\\uB354\\\\S06P31C205\\\\front\\\\src\\\\components\\\\Main\\\\InfinityScoll.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useInView } from 'react-intersection-observer';\nimport { getAxios } from '../../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction InfinityScoll(props) {\n  _s();\n\n  const axios = getAxios();\n  const [items, setItems] = useState([]);\n  const [page, setPage] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [ref, inView] = useInView(); // 서버에서 아이템을 가지고 오는 함수\n\n  const getItems = useCallback(async () => {\n    setLoading(true);\n    await axios.get('/diary/paging', {\n      params: {\n        pageNumber: page\n      }\n    }).then(res => {\n      console.log('res', res.data.content);\n      setItems(prevState => [...prevState, res.data.content]);\n    });\n    setLoading(false);\n  }, [page]); // `getItems` 가 바뀔 때 마다 함수 실행\n\n  useEffect(() => {\n    getItems();\n  }, [getItems]);\n  useEffect(() => {\n    // 사용자가 마지막 요소를 보고 있고, 로딩 중이 아니라면\n    if (inView && !loading) {\n      setPage(prevState => prevState + 1);\n    }\n  }, [inView, loading]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: items.map((item, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: console.log('item', item)\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InfinityScoll, \"Fb22o1Y7H7CdTQl6sP533p6BKLA=\", false, function () {\n  return [useInView];\n});\n\n_c = InfinityScoll;\nexport default InfinityScoll;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfinityScoll\");","map":{"version":3,"sources":["C:/Users/SSAFY/Desktop/새 폴더/S06P31C205/front/src/components/Main/InfinityScoll.jsx"],"names":["React","useCallback","useEffect","useState","useInView","getAxios","InfinityScoll","props","axios","items","setItems","page","setPage","loading","setLoading","ref","inView","getItems","get","params","pageNumber","then","res","console","log","data","content","prevState","map","item","idx"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,SAASC,QAAT,QAAyB,WAAzB;;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AAC5B,QAAMC,KAAK,GAAGH,QAAQ,EAAtB;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACY,GAAD,EAAMC,MAAN,IAAgBZ,SAAS,EAA/B,CAL4B,CAO5B;;AACA,QAAMa,QAAQ,GAAGhB,WAAW,CAAC,YAAY;AACvCa,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAMN,KAAK,CAACU,GAAN,CAAU,eAAV,EAA2B;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,UAAU,EAAET;AAAd;AAAV,KAA3B,EAA6DU,IAA7D,CAAmEC,GAAD,IAAS;AAC/EC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,GAAG,CAACG,IAAJ,CAASC,OAA5B;AACAhB,MAAAA,QAAQ,CAAEiB,SAAD,IAAe,CAAC,GAAGA,SAAJ,EAAeL,GAAG,CAACG,IAAJ,CAASC,OAAxB,CAAhB,CAAR;AACD,KAHK,CAAN;AAIAZ,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAP2B,EAOzB,CAACH,IAAD,CAPyB,CAA5B,CAR4B,CAiB5B;;AACAT,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,QAAQ;AACT,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;AAIAf,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIc,MAAM,IAAI,CAACH,OAAf,EAAwB;AACtBD,MAAAA,OAAO,CAAEe,SAAD,IAAeA,SAAS,GAAG,CAA5B,CAAP;AACD;AACF,GALQ,EAKN,CAACX,MAAD,EAASH,OAAT,CALM,CAAT;AAOA,sBACE;AAAA,cACGJ,KAAK,CAACmB,GAAN,CAAU,CAACC,IAAD,EAAOC,GAAP,kBACT;AAAA,gBAEGP,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBK,IAApB;AAFH,OAAUC,GAAV;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GAvCQxB,a;UAKeF,S;;;KALfE,a;AAyCT,eAAeA,aAAf","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\r\nimport { useInView } from 'react-intersection-observer'\r\nimport { getAxios } from '../../api'\r\n\r\nfunction InfinityScoll(props) {\r\n  const axios = getAxios()\r\n  const [items, setItems] = useState([])\r\n  const [page, setPage] = useState(1)\r\n  const [loading, setLoading] = useState(false)\r\n  const [ref, inView] = useInView()\r\n\r\n  // 서버에서 아이템을 가지고 오는 함수\r\n  const getItems = useCallback(async () => {\r\n    setLoading(true)\r\n    await axios.get('/diary/paging', { params: { pageNumber: page } }).then((res) => {\r\n      console.log('res', res.data.content)\r\n      setItems((prevState) => [...prevState, res.data.content])\r\n    })\r\n    setLoading(false)\r\n  }, [page])\r\n\r\n  // `getItems` 가 바뀔 때 마다 함수 실행\r\n  useEffect(() => {\r\n    getItems()\r\n  }, [getItems])\r\n\r\n  useEffect(() => {\r\n    // 사용자가 마지막 요소를 보고 있고, 로딩 중이 아니라면\r\n    if (inView && !loading) {\r\n      setPage((prevState) => prevState + 1)\r\n    }\r\n  }, [inView, loading])\r\n\r\n  return (\r\n    <div>\r\n      {items.map((item, idx) => (\r\n        <div key={idx}>\r\n          {/* {item.length - 1 == idx ? <div ref={ref}>{item.image}</div> : <div>{item.image}</div>} */}\r\n          {console.log('item', item)}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InfinityScoll\r\n"]},"metadata":{},"sourceType":"module"}