{"ast":null,"code":"import { getAxios } from '../api';\nimport { all, fork, takeLatest, call, put } from 'redux-saga/effects';\nimport { ARTICLE_ADD_FAILURE, ARTICLE_ADD_REQUEST, ARTICLE_ADD_SUCCESS, ARTICLE_LIST_REQUEST, ARTICLE_LIST_SUCCESS, ARTICLE_LIST_FAILURE } from '../reducers/article';\nimport moment from 'moment';\nimport 'moment/locale/ko';\nconst axios = getAxios();\n\nfunction articleAddAPI(data) {\n  return axios.post('diary', data.data, {\n    params: {\n      userId: data.userId\n    }\n  });\n}\n\nfunction* articleAdd(action) {\n  const navigate = action.data.navigate;\n\n  try {\n    yield call(articleAddAPI, action.data);\n    yield put({\n      type: ARTICLE_ADD_SUCCESS,\n      data: action.data\n    });\n    yield alert('글 작성 성공');\n    yield navigate('/');\n  } catch (err) {\n    yield put({\n      type: ARTICLE_ADD_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction articleListAPI(data) {\n  return axios.get('/user/read/', {\n    params: {\n      userId: data\n    }\n  });\n}\n\nfunction* articleList(action) {\n  try {\n    const result = yield call(articleListAPI, action.data);\n    console.log('날짜', result.data.user.dairies);\n    const dairies = result.data.user.dairies;\n    yield put({\n      type: ARTICLE_LIST_SUCCESS,\n      data: dairies\n    });\n  } catch (err) {\n    yield put({\n      type: ARTICLE_LIST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchArticleAdd() {\n  yield takeLatest(ARTICLE_ADD_REQUEST, articleAdd);\n}\n\nfunction* watchArticleList() {\n  yield takeLatest(ARTICLE_LIST_REQUEST, articleList);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchArticleAdd), fork(watchArticleList)]);\n}","map":{"version":3,"sources":["C:/Users/SSAFY/Desktop/새 폴더/S06P31C205/front/src/sagas/article.js"],"names":["getAxios","all","fork","takeLatest","call","put","ARTICLE_ADD_FAILURE","ARTICLE_ADD_REQUEST","ARTICLE_ADD_SUCCESS","ARTICLE_LIST_REQUEST","ARTICLE_LIST_SUCCESS","ARTICLE_LIST_FAILURE","moment","axios","articleAddAPI","data","post","params","userId","articleAdd","action","navigate","type","alert","err","error","response","articleListAPI","get","articleList","result","console","log","user","dairies","watchArticleAdd","watchArticleList","userSaga"],"mappings":"AAAA,SAASA,QAAT,QAAyB,QAAzB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,GAAtC,QAAiD,oBAAjD;AACA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,oBAJF,EAKEC,oBALF,EAMEC,oBANF,QAOO,qBAPP;AAQA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,kBAAP;AAEA,MAAMC,KAAK,GAAGb,QAAQ,EAAtB;;AAEA,SAASc,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,SAAOF,KAAK,CAACG,IAAN,CAAW,OAAX,EAAoBD,IAAI,CAACA,IAAzB,EAA+B;AAAEE,IAAAA,MAAM,EAAE;AAAEC,MAAAA,MAAM,EAAEH,IAAI,CAACG;AAAf;AAAV,GAA/B,CAAP;AACD;;AAED,UAAUC,UAAV,CAAqBC,MAArB,EAA6B;AAC3B,QAAMC,QAAQ,GAAGD,MAAM,CAACL,IAAP,CAAYM,QAA7B;;AACA,MAAI;AACF,UAAMjB,IAAI,CAACU,aAAD,EAAgBM,MAAM,CAACL,IAAvB,CAAV;AACA,UAAMV,GAAG,CAAC;AACRiB,MAAAA,IAAI,EAAEd,mBADE;AAERO,MAAAA,IAAI,EAAEK,MAAM,CAACL;AAFL,KAAD,CAAT;AAIA,UAAMQ,KAAK,CAAC,SAAD,CAAX;AACA,UAAMF,QAAQ,CAAC,GAAD,CAAd;AACD,GARD,CAQE,OAAOG,GAAP,EAAY;AACZ,UAAMnB,GAAG,CAAC;AACRiB,MAAAA,IAAI,EAAEhB,mBADE;AAERmB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaX;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,SAASY,cAAT,CAAwBZ,IAAxB,EAA8B;AAC5B,SAAOF,KAAK,CAACe,GAAN,CAAU,aAAV,EAAyB;AAAEX,IAAAA,MAAM,EAAE;AAAEC,MAAAA,MAAM,EAAEH;AAAV;AAAV,GAAzB,CAAP;AACD;;AAED,UAAUc,WAAV,CAAsBT,MAAtB,EAA8B;AAC5B,MAAI;AACF,UAAMU,MAAM,GAAG,MAAM1B,IAAI,CAACuB,cAAD,EAAiBP,MAAM,CAACL,IAAxB,CAAzB;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBF,MAAM,CAACf,IAAP,CAAYkB,IAAZ,CAAiBC,OAAnC;AACA,UAAMA,OAAO,GAAGJ,MAAM,CAACf,IAAP,CAAYkB,IAAZ,CAAiBC,OAAjC;AACA,UAAM7B,GAAG,CAAC;AACRiB,MAAAA,IAAI,EAAEZ,oBADE;AAERK,MAAAA,IAAI,EAAEmB;AAFE,KAAD,CAAT;AAID,GARD,CAQE,OAAOV,GAAP,EAAY;AACZ,UAAMnB,GAAG,CAAC;AACRiB,MAAAA,IAAI,EAAEX,oBADE;AAERc,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaX;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,UAAUoB,eAAV,GAA4B;AAC1B,QAAMhC,UAAU,CAACI,mBAAD,EAAsBY,UAAtB,CAAhB;AACD;;AAED,UAAUiB,gBAAV,GAA6B;AAC3B,QAAMjC,UAAU,CAACM,oBAAD,EAAuBoB,WAAvB,CAAhB;AACD;;AAED,eAAe,UAAUQ,QAAV,GAAqB;AAClC,QAAMpC,GAAG,CAAC,CAACC,IAAI,CAACiC,eAAD,CAAL,EAAwBjC,IAAI,CAACkC,gBAAD,CAA5B,CAAD,CAAT;AACD","sourcesContent":["import { getAxios } from '../api'\r\nimport { all, fork, takeLatest, call, put } from 'redux-saga/effects'\r\nimport {\r\n  ARTICLE_ADD_FAILURE,\r\n  ARTICLE_ADD_REQUEST,\r\n  ARTICLE_ADD_SUCCESS,\r\n  ARTICLE_LIST_REQUEST,\r\n  ARTICLE_LIST_SUCCESS,\r\n  ARTICLE_LIST_FAILURE,\r\n} from '../reducers/article'\r\nimport moment from 'moment'\r\nimport 'moment/locale/ko'\r\n\r\nconst axios = getAxios()\r\n\r\nfunction articleAddAPI(data) {\r\n  return axios.post('diary', data.data, { params: { userId: data.userId } })\r\n}\r\n\r\nfunction* articleAdd(action) {\r\n  const navigate = action.data.navigate\r\n  try {\r\n    yield call(articleAddAPI, action.data)\r\n    yield put({\r\n      type: ARTICLE_ADD_SUCCESS,\r\n      data: action.data,\r\n    })\r\n    yield alert('글 작성 성공')\r\n    yield navigate('/')\r\n  } catch (err) {\r\n    yield put({\r\n      type: ARTICLE_ADD_FAILURE,\r\n      error: err.response.data,\r\n    })\r\n  }\r\n}\r\n\r\nfunction articleListAPI(data) {\r\n  return axios.get('/user/read/', { params: { userId: data } })\r\n}\r\n\r\nfunction* articleList(action) {\r\n  try {\r\n    const result = yield call(articleListAPI, action.data)\r\n    console.log('날짜', result.data.user.dairies)\r\n    const dairies = result.data.user.dairies\r\n    yield put({\r\n      type: ARTICLE_LIST_SUCCESS,\r\n      data: dairies,\r\n    })\r\n  } catch (err) {\r\n    yield put({\r\n      type: ARTICLE_LIST_FAILURE,\r\n      error: err.response.data,\r\n    })\r\n  }\r\n}\r\n\r\nfunction* watchArticleAdd() {\r\n  yield takeLatest(ARTICLE_ADD_REQUEST, articleAdd)\r\n}\r\n\r\nfunction* watchArticleList() {\r\n  yield takeLatest(ARTICLE_LIST_REQUEST, articleList)\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchArticleAdd), fork(watchArticleList)])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}