{"ast":null,"code":"import { getAxios } from '../api';\nimport { all, fork, takeLatest, call, put } from 'redux-saga/effects';\nimport { ARTICLE_ADD_FAILURE, ARTICLE_ADD_REQUEST, ARTICLE_ADD_SUCCESS, ARTICLE_LIST_REQUEST, ARTICLE_LIST_SUCCESS, ARTICLE_LIST_FAILURE, ARTICLE_SEARCH_REQUEST, ARTICLE_SEARCH_SUCCESS, ARTICLE_SEARCH_FAILURE, DIARY_SEARCH_WORD_REQUEST, DIARY_SEARCH_WORD_SUCCESS } from '../reducers/article';\nconst axios = getAxios();\n\nfunction articleAddAPI(data) {\n  return axios.post('diary', data.data, {\n    params: {\n      userId: data.userId\n    }\n  });\n}\n\nfunction* articleAdd(action) {\n  const navigate = action.data.navigate;\n\n  try {\n    const res = yield call(articleAddAPI, action.data);\n    yield put({\n      type: ARTICLE_ADD_SUCCESS,\n      data: action.data\n    });\n    yield alert('글 작성 성공');\n    yield navigate(`/diary/read/${res.data.diary.dno}`);\n  } catch (err) {\n    yield put({\n      type: ARTICLE_ADD_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction articleListAPI(data) {\n  return axios.get('/user/read/', {\n    params: {\n      userId: data\n    }\n  });\n}\n\nfunction* articleList(action) {\n  try {\n    const result = yield call(articleListAPI, action.data);\n    const dairies = result.data.user.dairies;\n    yield put({\n      type: ARTICLE_LIST_SUCCESS,\n      data: dairies\n    });\n  } catch (err) {\n    yield put({\n      type: ARTICLE_LIST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction diarySearchWordAPI(data) {\n  const searchKind = data.searchKind;\n  return axios.get(`diary/${searchKind}`, {\n    params: {\n      userId: data.userId,\n      word: data.word\n    }\n  });\n}\n\nfunction* diarySearchWord(action) {\n  try {\n    const result = yield call(diarySearchWordAPI, action.data);\n    yield put({\n      type: DIARY_SEARCH_WORD_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ARTICLE_SEARCH_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchArticleAdd() {\n  yield takeLatest(ARTICLE_ADD_REQUEST, articleAdd);\n}\n\nfunction* watchArticleList() {\n  yield takeLatest(ARTICLE_LIST_REQUEST, articleList);\n}\n\nfunction* watchDiarySearchWord() {\n  yield takeLatest(DIARY_SEARCH_WORD_REQUEST, diarySearchWord);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchArticleAdd), fork(watchArticleList), fork(watchDiarySearchWord)]);\n}","map":{"version":3,"sources":["C:/Users/SSAFY/Desktop/새 폴더/S06P31C205/front/src/sagas/article.js"],"names":["getAxios","all","fork","takeLatest","call","put","ARTICLE_ADD_FAILURE","ARTICLE_ADD_REQUEST","ARTICLE_ADD_SUCCESS","ARTICLE_LIST_REQUEST","ARTICLE_LIST_SUCCESS","ARTICLE_LIST_FAILURE","ARTICLE_SEARCH_REQUEST","ARTICLE_SEARCH_SUCCESS","ARTICLE_SEARCH_FAILURE","DIARY_SEARCH_WORD_REQUEST","DIARY_SEARCH_WORD_SUCCESS","axios","articleAddAPI","data","post","params","userId","articleAdd","action","navigate","res","type","alert","diary","dno","err","error","response","articleListAPI","get","articleList","result","dairies","user","diarySearchWordAPI","searchKind","word","diarySearchWord","watchArticleAdd","watchArticleList","watchDiarySearchWord","userSaga"],"mappings":"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","sourcesContent":["import { getAxios } from '../api'\r\nimport { all, fork, takeLatest, call, put } from 'redux-saga/effects'\r\nimport {\r\n  ARTICLE_ADD_FAILURE,\r\n  ARTICLE_ADD_REQUEST,\r\n  ARTICLE_ADD_SUCCESS,\r\n  ARTICLE_LIST_REQUEST,\r\n  ARTICLE_LIST_SUCCESS,\r\n  ARTICLE_LIST_FAILURE,\r\n  ARTICLE_SEARCH_REQUEST,\r\n  ARTICLE_SEARCH_SUCCESS,\r\n  ARTICLE_SEARCH_FAILURE,\r\n  DIARY_SEARCH_WORD_REQUEST,\r\n  DIARY_SEARCH_WORD_SUCCESS,\r\n} from '../reducers/article'\r\n\r\nconst axios = getAxios()\r\n\r\nfunction articleAddAPI(data) {\r\n  return axios.post('diary', data.data, { params: { userId: data.userId } })\r\n}\r\n\r\nfunction* articleAdd(action) {\r\n  const navigate = action.data.navigate\r\n  try {\r\n    const res = yield call(articleAddAPI, action.data)\r\n    yield put({\r\n      type: ARTICLE_ADD_SUCCESS,\r\n      data: action.data,\r\n    })\r\n    yield alert('글 작성 성공')\r\n    yield navigate(`/diary/read/${res.data.diary.dno}`)\r\n  } catch (err) {\r\n    yield put({\r\n      type: ARTICLE_ADD_FAILURE,\r\n      error: err.response.data,\r\n    })\r\n  }\r\n}\r\n\r\nfunction articleListAPI(data) {\r\n  return axios.get('/user/read/', { params: { userId: data } })\r\n}\r\n\r\nfunction* articleList(action) {\r\n  try {\r\n    const result = yield call(articleListAPI, action.data)\r\n    const dairies = result.data.user.dairies\r\n    yield put({\r\n      type: ARTICLE_LIST_SUCCESS,\r\n      data: dairies,\r\n    })\r\n  } catch (err) {\r\n    yield put({\r\n      type: ARTICLE_LIST_FAILURE,\r\n      error: err.response.data,\r\n    })\r\n  }\r\n}\r\n\r\nfunction diarySearchWordAPI(data) {\r\n  const searchKind = data.searchKind\r\n  return axios.get(`diary/${searchKind}`, { params: { userId: data.userId, word: data.word } })\r\n}\r\n\r\nfunction* diarySearchWord(action) {\r\n  try {\r\n    const result = yield call(diarySearchWordAPI, action.data)\r\n    yield put({\r\n      type: DIARY_SEARCH_WORD_SUCCESS,\r\n      data: result.data,\r\n    })\r\n  } catch (err) {\r\n    yield put({\r\n      type: ARTICLE_SEARCH_FAILURE,\r\n      error: err.response.data,\r\n    })\r\n  }\r\n}\r\n\r\nfunction* watchArticleAdd() {\r\n  yield takeLatest(ARTICLE_ADD_REQUEST, articleAdd)\r\n}\r\n\r\nfunction* watchArticleList() {\r\n  yield takeLatest(ARTICLE_LIST_REQUEST, articleList)\r\n}\r\n\r\nfunction* watchDiarySearchWord() {\r\n  yield takeLatest(DIARY_SEARCH_WORD_REQUEST, diarySearchWord)\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchArticleAdd), fork(watchArticleList), fork(watchDiarySearchWord)])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}