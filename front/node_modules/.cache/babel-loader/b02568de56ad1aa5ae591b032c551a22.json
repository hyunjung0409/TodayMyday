{"ast":null,"code":"import { all, fork, take, call, put } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction loginAPI() {\n  return axios.post('/api/login');\n}\n\nfunction* logIn() {\n  try {\n    const result = yield call(loginAPI);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield take('LOG_IN_REQUEST', logIn);\n}\n\nfunction* watchLogOut() {\n  yield take('LOG_OUT');\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/Users/SSAFY/Desktop/새 폴더/S06P31C205/front/src/sagas/index.js"],"names":["all","fork","take","call","put","axios","loginAPI","post","logIn","result","type","data","err","response","watchLogIn","watchLogOut","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,IAA1B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,GAAoB;AAClB,SAAOD,KAAK,CAACE,IAAN,CAAW,YAAX,CAAP;AACD;;AAED,UAAUC,KAAV,GAAkB;AAChB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMN,IAAI,CAACG,QAAD,CAAzB;AACA,UAAMF,GAAG,CAAC;AACRM,MAAAA,IAAI,EAAE,gBADE;AAERC,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOC,GAAP,EAAY;AACZ,UAAMR,GAAG,CAAC;AACRM,MAAAA,IAAI,EAAE,gBADE;AAERC,MAAAA,IAAI,EAAEC,GAAG,CAACC,QAAJ,CAAaF;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUG,UAAV,GAAuB;AACrB,QAAMZ,IAAI,CAAC,gBAAD,EAAmBM,KAAnB,CAAV;AACD;;AAED,UAAUO,WAAV,GAAwB;AACtB,QAAMb,IAAI,CAAC,SAAD,CAAV;AACD;;AAED,eAAe,UAAUc,QAAV,GAAqB;AAClC,QAAMhB,GAAG,CAAC,CAACC,IAAI,CAACa,UAAD,CAAL,EAAmBb,IAAI,CAACc,WAAD,CAAvB,CAAD,CAAT;AACD","sourcesContent":["import { all, fork, take, call, put } from 'redux-saga/effects'\r\nimport axios from 'axios'\r\n\r\nfunction loginAPI() {\r\n  return axios.post('/api/login')\r\n}\r\n\r\nfunction* logIn() {\r\n  try {\r\n    const result = yield call(loginAPI)\r\n    yield put({\r\n      type: 'LOG_IN_SUCCESS',\r\n      data: result.data,\r\n    })\r\n  } catch (err) {\r\n    yield put({\r\n      type: 'LOG_IN_FAILURE',\r\n      data: err.response.data,\r\n    })\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  yield take('LOG_IN_REQUEST', logIn)\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield take('LOG_OUT')\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([fork(watchLogIn), fork(watchLogOut)])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}